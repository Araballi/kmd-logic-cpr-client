// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kmd.Logic.Cpr.ConsoleSample.Client
{
    using Models;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for CprClient.
    /// </summary>
    public static partial class CprClientExtensions
    {
            /// <summary>
            /// Gets citizen data by CPR
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// LoGIC subscription ID
            /// </param>
            /// <param name='cpr'>
            /// Personal identification number of danish citizen
            /// </param>
            /// <param name='configurationId'>
            /// Identifier that represents CPR environment and associated configuration
            /// which this request will be sent with.
            /// </param>
            public static Citizen GetByCpr(this ICprClient operations, System.Guid subscriptionId, string cpr, System.Guid? configurationId = default(System.Guid?))
            {
                return operations.GetByCprAsync(subscriptionId, cpr, configurationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets citizen data by CPR
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// LoGIC subscription ID
            /// </param>
            /// <param name='cpr'>
            /// Personal identification number of danish citizen
            /// </param>
            /// <param name='configurationId'>
            /// Identifier that represents CPR environment and associated configuration
            /// which this request will be sent with.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Citizen> GetByCprAsync(this ICprClient operations, System.Guid subscriptionId, string cpr, System.Guid? configurationId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByCprWithHttpMessagesAsync(subscriptionId, cpr, configurationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets citizen data by ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// LoGIC subscription ID
            /// </param>
            /// <param name='id'>
            /// ID of danish citizen
            /// </param>
            /// <param name='configurationId'>
            /// Identifier that represents CPR environment and associated configuration
            /// which this request will be sent with.
            /// </param>
            public static Citizen GetById(this ICprClient operations, System.Guid subscriptionId, System.Guid id, System.Guid? configurationId = default(System.Guid?))
            {
                return operations.GetByIdAsync(subscriptionId, id, configurationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets citizen data by ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// LoGIC subscription ID
            /// </param>
            /// <param name='id'>
            /// ID of danish citizen
            /// </param>
            /// <param name='configurationId'>
            /// Identifier that represents CPR environment and associated configuration
            /// which this request will be sent with.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Citizen> GetByIdAsync(this ICprClient operations, System.Guid subscriptionId, System.Guid id, System.Guid? configurationId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByIdWithHttpMessagesAsync(subscriptionId, id, configurationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves Cpr configuration assigned to the logic subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='configurationId'>
            /// </param>
            public static CprProviderConfigurationModel GetCprConfiguration(this ICprClient operations, System.Guid subscriptionId, System.Guid configurationId)
            {
                return operations.GetCprConfigurationAsync(subscriptionId, configurationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves Cpr configuration assigned to the logic subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='configurationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CprProviderConfigurationModel> GetCprConfigurationAsync(this ICprClient operations, System.Guid subscriptionId, System.Guid configurationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCprConfigurationWithHttpMessagesAsync(subscriptionId, configurationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves all Cpr configurations assigned to the logic subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            public static CprProviderConfigurationModel GetAllCprConfigurations(this ICprClient operations, System.Guid subscriptionId)
            {
                return operations.GetAllCprConfigurationsAsync(subscriptionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves all Cpr configurations assigned to the logic subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CprProviderConfigurationModel> GetAllCprConfigurationsAsync(this ICprClient operations, System.Guid subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllCprConfigurationsWithHttpMessagesAsync(subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds new CPR configuration and uploads certificate file to the Azure Key
            /// Vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='environment'>
            /// Possible values include: 'production', 'test'
            /// </param>
            /// <param name='certificate'>
            /// </param>
            /// <param name='certificatePassword'>
            /// </param>
            public static CprProviderConfiguration CreateDataDistributorConfiguration(this ICprClient operations, System.Guid subscriptionId, string name = default(string), string environment = default(string), Stream certificate = default(Stream), string certificatePassword = default(string))
            {
                return operations.CreateDataDistributorConfigurationAsync(subscriptionId, name, environment, certificate, certificatePassword).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds new CPR configuration and uploads certificate file to the Azure Key
            /// Vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='environment'>
            /// Possible values include: 'production', 'test'
            /// </param>
            /// <param name='certificate'>
            /// </param>
            /// <param name='certificatePassword'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CprProviderConfiguration> CreateDataDistributorConfigurationAsync(this ICprClient operations, System.Guid subscriptionId, string name = default(string), string environment = default(string), Stream certificate = default(Stream), string certificatePassword = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDataDistributorConfigurationWithHttpMessagesAsync(subscriptionId, name, environment, certificate, certificatePassword, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds or updates existing cpr configuration and uploads certificate file to
            /// the Azure Key Vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='configurationId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='environment'>
            /// Possible values include: 'production', 'test'
            /// </param>
            /// <param name='certificate'>
            /// </param>
            /// <param name='certificatePassword'>
            /// </param>
            public static CprProviderConfiguration UpdateDataDistributorConfiguration(this ICprClient operations, System.Guid subscriptionId, System.Guid configurationId, string name = default(string), string environment = default(string), Stream certificate = default(Stream), string certificatePassword = default(string))
            {
                return operations.UpdateDataDistributorConfigurationAsync(subscriptionId, configurationId, name, environment, certificate, certificatePassword).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds or updates existing cpr configuration and uploads certificate file to
            /// the Azure Key Vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='configurationId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='environment'>
            /// Possible values include: 'production', 'test'
            /// </param>
            /// <param name='certificate'>
            /// </param>
            /// <param name='certificatePassword'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CprProviderConfiguration> UpdateDataDistributorConfigurationAsync(this ICprClient operations, System.Guid subscriptionId, System.Guid configurationId, string name = default(string), string environment = default(string), Stream certificate = default(Stream), string certificatePassword = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDataDistributorConfigurationWithHttpMessagesAsync(subscriptionId, configurationId, name, environment, certificate, certificatePassword, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
